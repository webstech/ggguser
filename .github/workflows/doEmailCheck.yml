name: Check emails for PRs

# Scheduled job to check email archive repo for emails related to open PRs.
# This can run in any repo using env vars to identify the email repo and
# the monitored repo.

# This could run in the repo being monitored.  In that case, the vars
# would be adjusted to use the runtime context info.

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
      repo-owner:
        required: true
        type: string
      gitgitgadget-config:
        required: false
        type: string
      gitgitgadget-config-model:
        required: false
        type: string
      mail-repo-name:
        required: true
        type: string
      mail-repo-owner:
        required: true
        type: string
      mail-repo-host:
        required: true
        type: string
    secrets:
      token:
        required: true
      git-author-name:
        required: true
      git-author-email:
        required: true

jobs:
  process-emails:
    runs-on: ubuntu-latest
    env:
      # config location
      GITGITGADGET_CONFIG: ${{ inputs.gitgitgadget-config }}
      GITGITGADGET_CONFIG_MODEL: ${{ inputs.gitgitgadget-config-model }}

      # Set env vars used by git
      GIT_AUTHOR_NAME: ${{ secrets.git-author-name }}
      GIT_AUTHOR_EMAIL: ${{ secrets.git-author-email }}
      GIT_COMMITTER_NAME: ${{ secrets.git-author-name }}
      GIT_COMMITTER_EMAIL: ${{ secrets.git-author-email }}

      GITGITGADGET_REPO_OWNER: ${{ inputs.repo-owner }}
      GITGITGADGET_REPO_NAME: ${{ inputs.repo-name }}
      GITGITGADGET_PUBLISHREMOTE: https://github.com/${{ inputs.repo-owner }}/${{ inputs.repo-name }}
      GIT_CONFIG_PARAMETERS: '''gitgitgadget.${{ inputs.repo-owner }}.githubToken=${{ secrets.token }}'''

      GITGITGADGET_MAILREPO_NAME: ${{ inputs.mail-repo-name }}
      GITGITGADGET_MAILREPO_OWNER: ${{ inputs.mail-repo-owner }}
      GITGITGADGET_MAILREPO_HOST: ${{ inputs.mail-repo-host }}
      GITGITGADGET_LOREGITDIR: ./gggmail

    steps:
    - name: Validate config is specified
      if: ${{ !inputs.gitgitgadget-config && !inputs.gitgitgadget-config-model && (inputs.repo-owner != 'gitgitgadget') }}
      run: |
        echo "::error title='Input error'::Error - `gitgitgadget-config` or `gitgitgadget-config-model` must be specfified"

    - name: Validate both config are not specified
      if: ${{ inputs.gitgitgadget-config && inputs.gitgitgadget-config-model && (inputs.repo-owner != 'gitgitgadget') }}
      run: |
        echo "::warning title='Input warning'::Warning - `gitgitgadget-config` is ignored when `gitgitgadget-config-model` is specfified"

    - name: Set temp name if config model is specified
      if: ${{ inputs.gitgitgadget-config-model && (inputs.repo-owner != 'gitgitgadget') }}
      run: |
        echo "GITGITGADGET_CONFIG=/tmp/config" >> $GITHUB_ENV

    # required for configs (only if it contains a config which is unlikely in the real world)
    - name: ggguser - Checkout
      uses: actions/checkout@v3
      if: ${{ 1 == 1 }}
      with:
        path: ggguser
        token: ${{ secrets.token }}

    # Check out ggg supported project
    - name: gggmonitored - Checkout
      if: ${{ 1 == 0 }}
      uses: actions/checkout@v3
      with:
        repository: ${{ env.GITGITGADGET_REPO_OWNER }}/${{ env.GITGITGADGET_REPO_NAME }}
        path: gggmonitored
        token: ${{ secrets.token }}

    # Set up ggg supported project as a fully partial clone
    - name: gggmonitored - Checkout
      if: ${{ 1 == 1 }}
      run: |
        mkdir gggmonitored && cd gggmonitored
        git init --bare
        git remote add origin https://github.com/${{ env.GITGITGADGET_REPO_OWNER }}/${{ env.GITGITGADGET_REPO_NAME }}
        git config remote.origin.promisor true
        git config remote.origin.partialCloneFilter blob:none
        git config remote.origin.fetch +refs/heads/main:refs/heads/main
        git fetch --depth=1

    # Set token for GitHub credentials
    - name: Set token
      uses: actions/github-script@v6
      id: set-token
      if: ${{ 1 == 1 }}
      env:
        TOKEN: ${{ secrets.token }}
      with:
        github-token: ${{ secrets.token }}
        script: |
            const util = require('node:util');
            const execFile = util.promisify(require('node:child_process').execFile);
            const tokenConfigKey = "http.https://github.com/.extraheader";
            const basicCredential = Buffer.from(`x-access-token:${process.env.TOKEN}`, 'utf8').toString('base64');
            const tokenConfigValue = `AUTHORIZATION: basic ${basicCredential}`;
            const { stdout, stderr } = await execFile('git', ["-C", './gggmonitored', 'config', tokenConfigKey, tokenConfigValue]);
            console.log(stdout);
            console.log(stderr);

    # Set up email project as a fully partial clone
    - name: gggmail - Checkout
      if: ${{ 1 == 1 }}
      run: |
        # mkdir gggmail && cd gggmail
        mkdir $GITGITGADGET_LOREGITDIR && cd $GITGITGADGET_LOREGITDIR
        git init --bare
        git remote add origin https://${{ env.GITGITGADGET_MAILREPO_HOST }}/${{ env.GITGITGADGET_MAILREPO_OWNER }}/${{ env.GITGITGADGET_MAILREPO_NAME }}
        git config remote.origin.promisor true
        git config remote.origin.partialCloneFilter blob:none
        git config remote.origin.fetch +refs/heads/main:refs/heads/main
        git fetch --depth=2

    #
    # Finished installs and builds
    #

    # Generate a config with updates from the env
    # Not usually needed if the project can be set up with all the config values known
    - name: Download remote config
      if: ${{ startswith(env.GITGITGADGET_CONFIG, 'http') }}
      run: |
        CONFIG=/tmp/config
        curl get $GITGITGADGET_CONFIG >> $CONFIG
        echo "GITGITGADGET_CONFIG=$CONFIG" >> $GITHUB_ENV

    - name: Download remote config model
      if: ${{ startswith(env.GITGITGADGET_CONFIG_MODEL, 'http') }}
      run: |
        CONFIG=/tmp/config-model
        curl get $GITGITGADGET_CONFIG_MODEL >> $CONFIG
        echo "GITGITGADGET_CONFIG_MODEL=$CONFIG" >> $GITHUB_ENV

    - name: ggg gen config from model
      if: ${{ env.GITGITGADGET_CONFIG_MODEL }}
      uses: webstech/ggggen-config@main
      with:
        config: ${{ env.GITGITGADGET_CONFIG_MODEL }}
        file: ${{ env.GITGITGADGET_CONFIG }}
        format: json

    # check for emails
    - name: ggg misc action handler
      if: ${{ 1 == 1 }}
      # uses: webstech/gitgitgadget-pr-action@main
      uses: webstech/gitgitgadget-pr-action/.github/actions/misc-request@main
      with:
        # A repo scoped GitHub Personal Access Token.
        token: ${{ secrets.token }}

        # The location of the repository.
        repository-dir: ./gggmonitored

        # The location of the repository with gitgitgadget configuration information.
        config-repository-dir: ./ggguser

        # JSON configuration for commands.
        config: ${{ env.GITGITGADGET_CONFIG }}

        repo-owner: ${{ env.GITGITGADGET_REPO_OWNER }}
        repo-name: ${{ env.GITGITGADGET_REPO_NAME }}
        action: handle-new-mails

    # Push the notes back to the home office
    - name: Update notes
      if: ${{ 1 == 0 }}
      working-directory: gggmonitored
      run: |
        git push $GITGITGADGET_PUBLISHREMOTE refs/notes/gitgitgadget
