name: Process PR comment, create or sync

on:
  repository_dispatch:
    types: [cc-command, allow-command, disallow-command, submit-command, preview-command, pull-event]
    # real world would include:
    # types: [submit-command, preview-command]

jobs:
  process-pr-update-comment:
    runs-on: ubuntu-latest
    concurrency: gitgitgadget_process
    env:
      # values to update config
      GITGITGADGET_MAILREPO_NAME: "gggmail"
      GITGITGADGET_MAILREPO_OWNER: "webstech"
      GITGITGADGET_MAILREPO_HOST: "github.com"

      # values to update config
      GITGITGADGET_MAIL_AUTHOR: "gitter"
      #config location
      GITGITGADGET_CONFIG: "config.json"
      #GITGITGADGET_CONFIG_MODEL: "./ggguser/config/gggmonitored.json"

      # Allow passthru from monitored project
      # to support multiple users of same ggguser (as runner)
      GIT_AUTHOR_NAME: ${{ secrets.AUTHOR }}
      GIT_AUTHOR_EMAIL: ${{ secrets.EMAIL }}
      GIT_COMMITTER_NAME: ${{ secrets.AUTHOR }}
      GIT_COMMITTER_EMAIL: ${{ secrets.EMAIL }}

      # Set config vars (normally in the secrets?)
      GITGITGADGET_SMTPUSER: "joe_user@example.com"
      GITGITGADGET_SMTPHOST: "localhost"
      GITGITGADGET_SMTPPASS: "secret"
      GITGITGADGET_SMTPOPTS: "{port: 1025, secure:true, tls: {rejectUnauthorized: false}}"

      # Should action be setting this?  Should secret include repo name to support
      # multiple repos in one dispatch container repo?
      # Alternate is ?  The private key won't work here so how should auth be handled
      # for generating a temporary token?  Or are secrets acceptable?
      GIT_CONFIG_PARAMETERS: "'gitgitgadget.webstech.githubToken=${{ secrets.RUNNER_TOKEN }}'"

    steps:
    - name: dump github context
      env:
        PAYLOAD_CONTEXT: ${{ toJson(github) }}
      if: ${{ 1 == 0 }}
      run: |
        echo "$PAYLOAD_CONTEXT"
        #echo "::error::hard stop"
        #exit 1

    - name: Set config vars based on event
      if: ${{ endswith(github.event.action, 'event') }}
      run: |
        CHECK_ID=${{ github.event.client_payload.check_id }}
        PR_NUMBER=${{ github.event.client_payload.github.event.number }}
        REPO_OWNER=${{ github.event.client_payload.github.repository_owner }}
        REPO_NAME=${{ github.event.client_payload.github.event.repository.name }}
        REPO_BASEOWNER=${{ github.event.client_payload.github.event.pull_request.base.repo.owner.login }}
        # ${{ github.event.client_payload.slash_command.mail-name }}d
        # GITGITGADGET_MAILREPO_NAME=${{ github.event.client_payload.slash_command.args.named.mail-name }}

        echo "CHECK_ID=$CHECK_ID" >> $GITHUB_ENV
        echo "GITGITGADGET_REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
        echo "GITGITGADGET_REPO_BASEOWNER=$REPO_BASEOWNER" >> $GITHUB_ENV
        echo "GITGITGADGET_REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        echo "GITGITGADGET_PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        echo "GITGITGADGET_ACTION=push" >> $GITHUB_ENV

    - name: Set config vars based on /command
      if: ${{ endswith(github.event.action, 'command') }}
      run: |
        PR_NUMBER=${{ github.event.client_payload.github.event.number }}
        REPO_OWNER=${{ github.event.client_payload.github.payload.repository.owner.login }}
        REPO_NAME=${{ github.event.client_payload.github.payload.repository.name }}
        REPO_BASEOWNER=${{ github.event.client_payload.pull_request.base.repo.owner.login }}
        COMMENT_ID=${{ github.event.client_payload.github.payload.comment.id }}

        echo "GITGITGADGET_REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
        echo "GITGITGADGET_REPO_BASEOWNER=$REPO_BASEOWNER" >> $GITHUB_ENV
        echo "GITGITGADGET_REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        echo "GITGITGADGET_PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        echo "GITGITGADGET_ACTION=comment" >> $GITHUB_ENV
        echo "GITGITGADGET_COMMENT_ID=$COMMENT_ID" >> $GITHUB_ENV

    - name: Indicate if smtp server is needed
      if: ${{ startswith(github.event.action, 'submit') || startswith(github.event.action, 'preview') }}
      run: echo "RUN_SMTP=YES" >> $GITHUB_ENV

    - name: Set config vars (normally in the secrets?)
      run: |
        echo "GITGITGADGET_PUBLISHREMOTE=https://github.com/$GITGITGADGET_REPO_BASEOWNER/$GITGITGADGET_REPO_NAME" >> $GITHUB_ENV
        echo "GITGITGADGET_LOREGITDIR=./gggmail" >> $GITHUB_ENV
        echo "GITGITGADGET_CONFIG_MODEL=./ggguser/config/$GITGITGADGET_REPO_NAME.json" >> $GITHUB_ENV
        echo "GIT_CONFIG_PARAMETERS='gitgitgadget.$GITGITGADGET_REPO_OWNER.githubToken=$GGG_TOKEN'" >> $GITHUB_ENV
      env:
        GGG_TOKEN: ${{ secrets.RUNNER_TOKEN }}

    - name: Mark Check underway
      uses: LouisBrunner/checks-action@v1.1.1
      id: check_create
      if: ${{ env.CHECK_ID }}
      with:
        # token: ${{ secrets.GITHUB_TOKEN }}
        token: ${{ secrets.RUNNER_TOKEN }}
        id: ${{ env.CHECK_ID }}
        status: in_progress

    # install node
    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        # cache: "npm"
        # cache-dependency-path: gitgitgadget/package-lock.json

    # required for configs
    - name: ggguser - Checkout
      uses: actions/checkout@v3
      if: ${{ 1 == 1 }}
      with:
        path: ggguser
        token: ${{ secrets.RUNNER_TOKEN }}

    # Check out ggg supported project
    - name: gggmonitored - Checkout
      if: ${{ 1 == 0 }}
      uses: actions/checkout@v3
      with:
        repository: ${{ env.GITGITGADGET_REPO_OWNER }}/${{ env.GITGITGADGET_REPO_NAME }}
        # repository: webstech/gggmonitored
        path: gggmonitored
        token: ${{ secrets.RUNNER_TOKEN }}

    # Set up ggg supported project as a fully partial clone
    - name: gggmonitored - Checkout
      if: ${{ 1 == 1 }}
      run: |
        mkdir gggmonitored && cd gggmonitored
        git init --bare
        git remote add origin https://github.com/${{ env.GITGITGADGET_REPO_OWNER }}/${{ env.GITGITGADGET_REPO_NAME }}
        git config remote.origin.promisor true
        git config remote.origin.partialCloneFilter blob:none

    # Check out email project
    - name: gggmail - Checkout
      if: ${{ ENV.RUN_SMTP }}
      uses: actions/checkout@v3
      with:
        repository: webstech/gggmail
        path: gggmail
        token: ${{ secrets.RUNNER_TOKEN }}

    #
    # Finished installs and builds
    #

    - name: Start email service
      if: ${{ ENV.RUN_SMTP }}
      # if: ${{ endswith(github.event.action, 'command') }}
      uses: webstech/gggsmtp-server-docker/.github/actions/smtp-server-start@main
      with:
        token: ${{ secrets.RUNNER_TOKEN }}
        mail: ${{ env.GITHUB_WORKSPACE }}/gggmail
        file: 1
        git-author: Git Going
        git-email: gone@example.com

    # Generate a config with updates from the env
    # Not usually needed if the project can be set up with all the config values known
    - name: Download remote config
      if: ${{ startswith(env.CONFIG_FILE, 'http') }}
      run: |
        CONFIG=/tmp/config
        curl get ${{ env.CONFIG_FILE }} >> $CONFIG
        echo "GITGITGADGET_CONFIG_MODEL=$CONFIG" >> $GITHUB_ENV

    - name: ggg gen config
      uses: webstech/ggggen-config@main
      with:
        config: ${{ env.GITGITGADGET_CONFIG_MODEL }}
        file: ${{ env.GITGITGADGET_CONFIG }}
        format: "json"

    - name: ggg handler for pull requests and comments
      # uses: webstech/gitgitgadget-pr-action@main
      uses: webstech/gitgitgadget-pr-action/.github/actions/pull-request@main
      with:
        # A repo scoped GitHub Personal Access Token.
        token: ${{ secrets.RUNNER_TOKEN }}

        # An optional GitHub token to use for reactions.
        # Default: ${{ github.token }}
        reaction-token: ""

        # Add reactions to comments containing commands.
        # Default: true
        reactions: ""

        # The repository permission level required by the user to dispatch commands.
        # Default: write
        permission: ""

        # The location of the repository.
        repository-dir: "./gggmonitored"

        # The location of the repository with gitgitgadget configuration information.
        config-repository-dir: "./ggguser"

        # The file of configuration information.
        configuration-file: ""

        # JSON configuration for commands.
        config: ${{ env.GITGITGADGET_CONFIG }}

        # JSON configuration from a file for commands.
        config-from-file: ""

        # Repository owner.
        repo-owner: ${{ env.GITGITGADGET_REPO_OWNER }}

        # Repository name.
        repo-name: ${{ env.GITGITGADGET_REPO_NAME }}

        # Repository pull target.
        repo-baseowner: ${{ env.GITGITGADGET_REPO_BASEOWNER }}

        # Pull request number.
        pull-request-number: ${{ env.GITGITGADGET_PR_NUMBER }}

        # Comment id for handling comments.
        comment-id: ${{ env.GITGITGADGET_COMMENT_ID }}

        # Value of 'push' or 'comment'
        action: ${{ env.GITGITGADGET_ACTION }}


      # see what happened inside the server
    - name: display smtp server errors
      if: ${{ always() && ENV.RUN_SMTP }}
      shell: 'script -q -e -c "bash --noprofile --norc -eo pipefail {0}"'
      run: docker logs smtp

    - name: Stop email service
      if: ${{ ENV.RUN_SMTP }}
      uses: webstech/gggsmtp-server-docker/.github/actions/smtp-server-stop@main

    # check for emails
    - name: git log for emails
      if: ${{ ENV.RUN_SMTP }}
      run: |
        git log
        # git log -p -U9999 --reverse 80cb5f54834b6034be3b76dd5b66521c5310b8ac..HEAD
      working-directory: gggmail

    - name: ggg misc action handler
      if: ${{ ENV.RUN_SMTP }}
      # uses: webstech/gitgitgadget-pr-action@main
      uses: webstech/gitgitgadget-pr-action/.github/actions/misc-request@main
      with:
        # A repo scoped GitHub Personal Access Token.
        token: ${{ secrets.RUNNER_TOKEN }}

        # The location of the repository.
        repository-dir: "./gggmonitored"

        # The location of the repository with gitgitgadget configuration information.
        config-repository-dir: "./ggguser"

        # JSON configuration for commands.
        config: ${{ env.GITGITGADGET_CONFIG }}

        # Repository owner.
        repo-owner: ${{ env.GITGITGADGET_REPO_OWNER }}

        # Repository name.
        repo-name: ${{ env.GITGITGADGET_REPO_NAME }}

        # Value of 'push' or 'comment'
        action: handle-new-mails

    - name: Mark Check Complete
      uses: LouisBrunner/checks-action@v1.1.1
      id: check_complete
      if: ${{ env.CHECK_ID && always() }}
      with:
        # token: ${{ secrets.GITHUB_TOKEN }}
        token: ${{ secrets.RUNNER_TOKEN }}
        id: ${{ env.CHECK_ID }}
        status: completed
        conclusion: ${{ job.status }}